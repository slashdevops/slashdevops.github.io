<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>File on SlashDevOps</title>
    <link>https://slashdevops.com/tags/file/</link>
    <description>Recent content in File on SlashDevOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Apr 2024 10:17:23 +0200</lastBuildDate>
    <atom:link href="https://slashdevops.com/tags/file/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Files as a Flag in the Golang Command Line Interface (CLI)</title>
      <link>https://slashdevops.com/post/2024/04/07/1/using-files-as-a-flag-in-the-golang-command-line-interface-cli/</link>
      <pubDate>Sun, 07 Apr 2024 10:17:23 +0200</pubDate>
      <guid>https://slashdevops.com/post/2024/04/07/1/using-files-as-a-flag-in-the-golang-command-line-interface-cli/</guid>
      <description>Introduction In this post, we will see how to use files as a flag in the Golang Command Line Interface (CLI). This is useful when you want to pass a file (not the file name, but an object of file type) as a flag to your CLI application.
Use the file name as a flag is straightforward, you can use the flag.String or flag.StringVar function to get the file name and then do the necessary checks to validate if this exist, create it, clean it, etc.</description>
    </item>
  </channel>
</rss>
